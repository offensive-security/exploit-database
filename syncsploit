#!/bin/bash
#       Name: SyncSploit - Exploit-DB to MetaSploit synchronisation tool
#    Version: 1.0.0 (Release date: 2017-01-10)
# Written by: x42en
#   Homepage: https://github.com/offensive-security/exploit-database
#
## NOTE:
#   Exit code '0' means finished normally
#   Exit code '1' means something went wrong
#   Exit code '2' means finished help screen

# Define accepted options
OPTS=`getopt -o vh,r:i:d: --long verbose,help,rank:,id:,date: -n 'parse-options' -- "$@"`

## OS settings (get the path of where the script is stored + database file + program name)
gitpath="$( cd "$( dirname "$(realpath ${BASH_SOURCE[0]})" )" && pwd)"
csvpath="${gitpath}/files.csv"
progname="$( basename "$0" )"

## Set LANG variable to avoid illegal byte sequence errors
LANG=C

## Set number of file sync
FSYNC=0
## Set verbose flag
VERBOSE=0
## Define metasploit modules directory
METASPLOIT="${HOME}/.msf4/modules/exploits"

# Initialize var
RANK=''
EDBID=0
DATE=''
RANKCMD=''
declare -a AVAIL=('Excellent', 'Great', 'Good', 'Normal', 'Average', 'Low', 'Manual')

## Usage info
function usage()
{
  echo " Usage: ${progname} [options]"
  echo
  echo "=========="
  echo " Examples "
  echo "=========="
  echo "  ${progname} -v"
  echo "  ${progname} -r good"
  echo "  ${progname} -i 1337"
  echo "  ${progname} -d YYYY/MM/DD"
  echo "  ${progname} -h"
  echo
  echo "========="
  echo " Options "
  echo "========="
  echo "   -v, --verbose               Show copied & excluded files + created directories."
  echo "   -r, --rank    [Term]        Copy all exploits with specific rank."
  echo "   -i, --id      [EDB-ID]      Copy a specific exploit."
  echo "   -d, --date    [YYYY/MM/DD]  Copy all exploits after date YYYY/MM/DD."
  echo "   -h, --help                  Show this help."
  echo
  exit 2
}

## Function used to copy exploit found
function copy()
{
  # Initialize vars
  SRC="$gitpath/$1"
  DST="${METASPLOIT}/${1/platforms\/}"
  DPATH="$( dirname $DST )"
  
  # Check if file exists
  if [[ ! -f "${DST}" ]]; then
    # If directory does not exists, create it
    if [[ ! -d "${DPATH}" ]]; then
      if [[ $VERBOSE == 1 ]]; then
        printf "[+] Creating %s directory...\n" $DPATH
      fi
      mkdir -p $DPATH 2>/dev/null
    fi

    # Increase file sync
    ((FSYNC++))

    # Copy the file
    if [[ $VERBOSE == 1 ]]; then
      printf '[+] Copying %s -> %s\n' $SRC $DST
    else
      echo -ne ' exploits added...\033[0K\r[+]' $FSYNC
    fi
    cp -f $SRC $DST 2>/dev/null
  fi
}

## Copy specific exploit by EDBI
function getXploit(){
  ## Extract Sploit's Ninja
  line="$( awk -F "\"*,\"*" '{ printf "%s|%s\n", $1, $2 }' "${csvpath}" \
  | eval "fgrep -w ${EDBID}" \
  | awk -F '|' '/1/ {print $2}' )"
  if fgrep -qHl -e "Rank = " "$line"; then
    printf "[+] Add exploit ${line} to -> ${METASPLOIT}\n"
    copy "${line}"
  else
    echo "[!] This does not appear to be a valid Metasploit module"
    read -p "Copy it anyway ? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      copy $line
    else
      exit 1
    fi
  fi
}

## Check if a file is metasploit compliant
function checkSploit(){
  # Check file is a valid Metasploit module (with initialize and rank defined)
  if [[ ! -z $( fgrep -Hl -e "require 'msf/core'" -e "Rank = " -e "def initialize" "${1}" 2>/dev/null ) ]]; then
    # If date is defined and correct
    if [[ ! -z $DATE ]]; then
      # fdate="$( awk -F "\"*,\"*" '{ printf "%s|%s\n", $2, $4 }' "${csvpath}" \
      # | eval "fgrep -w ${1}" \
      # | awk -F '|' '/1/ {print $2}' )"
      # echo "$fdate found"
      if [[ $2 > $DATE ]]; then
        DOK=1
      else
        DOK=0
      fi
    # If no date set, all are valids
    else
      DOK=1
    fi
    # If rank specified and correct
    if [[ ! -z $RANKCMD ]]; then
      if [[ ! -z $( eval "fgrep -Hl ${RANKCMD} ${1}" ) ]]; then
        ROK=1
      else
        ROK=0
      fi
    # If no rank set, all are valids
    else
      ROK=1
    fi
    # If both conditions are met
    if [[ $ROK -eq 1 ]] && [[ $DOK -eq 1 ]]; then
      copy "${1}"
    fi
  elif [[ $VERBOSE == 1 ]]; then
    printf '[!] Invalid %s\n' $1
    printf '[!] Does not appear to be a valid metasploit script !\n'
  fi
}

## Print results
function result(){
  if [[ FSYNC -eq 0 ]]; then
    printf "\033[0K\r\n[+] No module copied, Metasploit modules are already up to date !\n"
  else
    printf "\033[0K\r[+] %d Metasploit modules copied...\n" $FSYNC
    
    printf "\033[0K\r[+] Running metasploit cleaner\n"
    # If metasploit is installed -> update it !
    if [[ $( command -v msfupdate ) ]]; then
      read -p "Do you want to run  'msfupdate' ? [Y/n] " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        msfupdate
      fi

    fi

  fi
}

## Avoid running without options
if [[ -z $1 ]]; then usage ; fi
if [ $? != 0 ] ; then echo "Failed parsing options.\n" >&2 ; exit 1 ; fi
eval set -- "$OPTS"

## Parse short and long options
while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=1; shift ;;
    -h | --help )    usage ;;
    -r | --rank )    RANK="$RANK:$2"; shift; shift ;;
    -i | --id )      EDBID="$2"; shift; shift ;;
    -d | --date )    DATE="$2"; shift; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

## Validate parameters
if [[ EDBID -gt 0 ]]; then
  if [[ ! -z "${DATE// }" ]] || [[ ! -z "${RANK// }" ]]; then
    echo '[!] Sorry the --id (EDB-ID) parameter can not be used with others.\n'
    exit 1
  fi
else
  echo "[+] Conditions set:"
  if [[ ! -z "${DATE// }" ]]; then
    DATE=$(date "+%Y-%m-%d" -d "${DATE}" 2>/dev/null)
    if [[ -z "${DATE// }" ]]; then
      echo '[!] Sorry your date is invalid!'
      exit 1
    else
      # Get all exploits after date...
      echo "  - Add all exploits after ${DATE}...."
    fi
  fi
  if [[ ! -z "${RANK// }" ]]; then
    RANK=${RANK:1}
    RANKS=$(echo $RANK | tr ":" "\n")
    for r in $RANKS
    do
      r=${r^}
      if [[ " ${AVAIL[*]} " == *"${r}"* ]]; then
        RANKCMD="${RANKCMD}-e \"Rank = ${r}Ranking\" "
        echo "  - Add all exploits with ${r} ranking..."
      else
        continue
      fi
    done
  fi
fi

## If we cannot find files.csv
if [[ ! -f "${csvpath}" ]]; then
  echo '[!] Could not find: ' ${csvpath}
  exit 1
fi

## If metasploit directory is not set create it
if [[ ! -d $METASPLOIT ]]; then
  echo "[!] Metasploit modules directory: ${METASPLOIT} does not exists"
  read -p "Do you want us to create it ? [y/N] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    mkdir -p $METASPLOIT
  else
    exit 1
  fi
fi

## If we search specific exploit
if [[ $EDBID -gt 0 ]]; then
  getXploit
## If we copy multiple exploit
else
  printf "\n[+] Updating user's Metasploit modules -> ${METASPLOIT}\n"
  # Extract Sploit's Ninja
  OUTPUT="$( awk -F "\"*,\"*" '{ printf "%s|%s|%s\n", $3, $2, $4 }' "${csvpath}" \
    | sed '/ (Metasploit)/!d' \
    | awk -F '|' '/1/ {print $3$2}')"

  # Deal with each exploit found
  while read -s -r line;
  do
    len=${#line}
    fdate=${line:0:10}
    ffile=${line:10:len-10}
    # Check file is a ruby script
    if [[ ${ffile##*.} == 'rb' ]]; then
      checkSploit $ffile $fdate
    elif [[ $VERBOSE == 1 ]]; then
      printf '[!] Exclude %s\n' ${arr[1]}
      printf '[!] Does not appear to be a valid ruby script !\n'
    fi
  done <<< "${OUTPUT}"
fi
## Print what we found
result
